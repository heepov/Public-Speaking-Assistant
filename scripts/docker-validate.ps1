# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Docker –ø—Ä–æ–µ–∫—Ç–∞
Write-Host "üîç –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø DOCKER –ü–†–û–ï–ö–¢–ê" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker –Ω–∞–π–¥–µ–Ω: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
Write-Host "`nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤:" -ForegroundColor Yellow

$requiredFiles = @(
    "app/docker/docker-compose.yml",
    "app/docker/Dockerfile",
    "app/docker/requirements.txt",
    "app/features/video_to_audio/docker/Dockerfile",
    "app/features/video_to_audio/docker/requirements.txt",
    "app/features/transcription/docker/Dockerfile",
    "app/features/transcription/docker/requirements.txt"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file - –ù–ï –ù–ê–ô–î–ï–ù!" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å docker-compose.yml
Write-Host "`nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ docker-compose.yml:" -ForegroundColor Yellow
try {
    $composeConfig = docker-compose -f app/docker/docker-compose.yml config
    Write-Host "‚úÖ docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤ docker-compose.yml:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile'—ã
Write-Host "`nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile'–æ–≤:" -ForegroundColor Yellow

$dockerfiles = @(
    "app/docker/Dockerfile",
    "app/features/video_to_audio/docker/Dockerfile",
    "app/features/transcription/docker/Dockerfile"
)

foreach ($dockerfile in $dockerfiles) {
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        $content = Get-Content $dockerfile -Raw
        if ($content -match "FROM" -and $content -match "WORKDIR" -and $content -match "COPY") {
            Write-Host "‚úÖ $dockerfile - –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $dockerfile - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå $dockerfile - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
Write-Host "`nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt:" -ForegroundColor Yellow

$requirementsFiles = @(
    "app/docker/requirements.txt",
    "app/features/video_to_audio/docker/requirements.txt",
    "app/features/transcription/docker/requirements.txt"
)

foreach ($reqFile in $requirementsFiles) {
    try {
        $content = Get-Content $reqFile
        $packageCount = ($content | Where-Object { $_ -match "^[a-zA-Z]" }).Count
        Write-Host "‚úÖ $reqFile - $packageCount –ø–∞–∫–µ—Ç–æ–≤" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå $reqFile - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—ã
Write-Host "`nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤:" -ForegroundColor Yellow
$expectedImages = @("media-processor-main:latest", "media-processor-converter:latest", "media-processor-transcription:latest")
foreach ($image in $expectedImages) {
    try {
        $imageInfo = docker images $image --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        if ($imageInfo -and $imageInfo -notmatch "REPOSITORY") {
            Write-Host "‚úÖ $image - –ù–∞–π–¥–µ–Ω" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $image - –ù–µ –Ω–∞–π–¥–µ–Ω (–Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å)" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ö†Ô∏è $image - –ù–µ –Ω–∞–π–¥–µ–Ω (–Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å)" -ForegroundColor Yellow
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
Write-Host "`nüìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" -ForegroundColor Yellow
$expectedContainers = @("media-processor-main", "media-processor-converter", "media-processor-transcription")
$runningCount = 0

foreach ($container in $expectedContainers) {
    try {
        $status = docker inspect --format='{{.State.Status}}' $container 2>$null
        if ($status) {
            switch ($status) {
                "running" { 
                    Write-Host "‚úÖ $container - –ó–∞–ø—É—â–µ–Ω" -ForegroundColor Green
                    $runningCount++
                }
                "exited" { Write-Host "‚èπÔ∏è $container - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Yellow }
                "created" { Write-Host "üìù $container - –°–æ–∑–¥–∞–Ω" -ForegroundColor Cyan }
                default { Write-Host "‚ùì $container - $status" -ForegroundColor Gray }
            }
        } else {
            Write-Host "‚ùå $container - –ù–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå $container - –ù–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
Write-Host "`nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:" -ForegroundColor Yellow
$ports = @(8000, 8001, 8002)
foreach ($port in $ports) {
    try {
        $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
        if ($connection) {
            Write-Host "‚úÖ –ü–æ—Ä—Ç $port - –û—Ç–∫—Ä—ã—Ç" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –ü–æ—Ä—Ç $port - –ó–∞–∫—Ä—ã—Ç" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå –ü–æ—Ä—Ç $port - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    }
}

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
Write-Host "`nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:" -ForegroundColor Yellow
Write-Host "==================" -ForegroundColor Yellow

if ($runningCount -eq $expectedContainers.Count) {
    Write-Host "üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç!" -ForegroundColor Green
    Write-Host "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000" -ForegroundColor Cyan
} elseif ($runningCount -gt 0) {
    Write-Host "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢! –ó–∞–ø—É—â–µ–Ω–æ $runningCount –∏–∑ $($expectedContainers.Count) –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor Yellow
    Write-Host "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ./scripts/docker-start-all.ps1" -ForegroundColor Cyan
} else {
    Write-Host "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ù–∏ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
    Write-Host "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞: ./scripts/docker-start-all.ps1" -ForegroundColor Cyan
}

Write-Host "`nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:" -ForegroundColor Cyan
Write-Host "===============" -ForegroundColor Cyan
Write-Host "‚Ä¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞" -ForegroundColor White
Write-Host "‚Ä¢ Health checks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor White
Write-Host "‚Ä¢ –°–µ—Ç–µ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ media-network" -ForegroundColor White
Write-Host "‚Ä¢ –û–±—â–∏–µ volumes –¥–ª—è uploads/outputs/logs" -ForegroundColor White
Write-Host "‚Ä¢ –õ–µ–≥–∫–∏–µ –æ–±—Ä–∞–∑—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏" -ForegroundColor White

Write-Host "`nüîß –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan
Write-Host "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö: ./scripts/docker-start-all.ps1" -ForegroundColor White
Write-Host "–û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./scripts/docker-stop.ps1" -ForegroundColor White
Write-Host "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞: ./scripts/docker-build-microservices.ps1" -ForegroundColor White
Write-Host "–õ–æ–≥–∏: docker-compose -f app/docker/docker-compose.yml logs -f" -ForegroundColor White
Write-Host "–û—á–∏—Å—Ç–∫–∞: ./scripts/docker-clean-rebuild.ps1" -ForegroundColor White
