# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker –Ω–∞–π–¥–µ–Ω: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    Write-Host "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop —Å https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
Write-Host "`nüìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" -ForegroundColor Yellow
$containers = docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
if ($containers) {
    Write-Host $containers
} else {
    Write-Host "‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
Write-Host "`nüìã –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ):" -ForegroundColor Yellow
$allContainers = docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
Write-Host $allContainers

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health status
Write-Host "`nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health status:" -ForegroundColor Yellow

$expectedContainers = @("media-processor-main", "media-processor-converter", "media-processor-transcription")
$healthyCount = 0

foreach ($container in $expectedContainers) {
    try {
        $health = docker inspect --format='{{.State.Health.Status}}' $container 2>$null
        if ($health) {
            switch ($health) {
                "healthy" { 
                    Write-Host "‚úÖ $container - –ó–¥–æ—Ä–æ–≤" -ForegroundColor Green
                    $healthyCount++
                }
                "unhealthy" { Write-Host "‚ùå $container - –ù–µ –∑–¥–æ—Ä–æ–≤" -ForegroundColor Red }
                "starting" { Write-Host "üîÑ $container - –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è" -ForegroundColor Yellow }
                default { Write-Host "‚ùì $container - $health" -ForegroundColor Gray }
            }
        } else {
            Write-Host "‚ö†Ô∏è $container - Health check –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå $container - –ù–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
Write-Host "`nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:" -ForegroundColor Yellow
foreach ($container in $expectedContainers) {
    try {
        $logs = docker logs --tail=5 $container 2>$null
        if ($logs -match "ERROR|Exception|Error|Failed") {
            Write-Host "‚ö†Ô∏è $container" -ForegroundColor Yellow
            $logs | Select-String "ERROR|Exception|Error|Failed" | ForEach-Object {
                Write-Host "   $_" -ForegroundColor Red
            }
        }
    } catch {
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
Write-Host "`nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:" -ForegroundColor Yellow
$ports = @(8000, 8001, 8002)
foreach ($port in $ports) {
    try {
        $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
        if ($connection) {
            Write-Host "‚úÖ –ü–æ—Ä—Ç $port - –û—Ç–∫—Ä—ã—Ç" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –ü–æ—Ä—Ç $port - –ó–∞–∫—Ä—ã—Ç" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå –ü–æ—Ä—Ç $port - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—ã
Write-Host "`nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤:" -ForegroundColor Yellow
$expectedImages = @("media-processor-main:latest", "media-processor-converter:latest", "media-processor-transcription:latest")
foreach ($image in $expectedImages) {
    try {
        $imageInfo = docker images $image --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        if ($imageInfo -and $imageInfo -notmatch "REPOSITORY") {
            Write-Host "‚úÖ $image - –ù–∞–π–¥–µ–Ω" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $image - –ù–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå $image - –ù–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    }
}

Write-Host "`nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:" -ForegroundColor Yellow
if ($healthyCount -eq $expectedContainers.Count) {
    Write-Host "üéâ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–¥–æ—Ä–æ–≤—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç!" -ForegroundColor Green
    Write-Host "üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor Cyan
} else {
    Write-Host "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤—ã" -ForegroundColor Yellow
    Write-Host "üí° –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ./scripts/docker-start-all.ps1" -ForegroundColor Cyan
}

Write-Host "`nüìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Cyan
Write-Host "   –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö: ./scripts/docker-start-all.ps1" -ForegroundColor White
Write-Host "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./scripts/docker-stop.ps1" -ForegroundColor White
Write-Host "   –õ–æ–≥–∏: docker-compose -f app/docker/docker-compose.yml logs -f" -ForegroundColor White
Write-Host "   –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞: ./scripts/docker-build-microservices.ps1" -ForegroundColor White
