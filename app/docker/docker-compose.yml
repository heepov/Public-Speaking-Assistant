# Убираем устаревшую версию

services:
  # Основной контейнер - FastAPI + веб-интерфейс (легкий)
  main-app:
    build:
      context: ../..
      dockerfile: app/docker/Dockerfile
    image: media-processor-main:latest
    container_name: media-processor-main
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      - DOCKER_ENV=true
    volumes:
      - ../../app:/app/app
      - ../../uploads:/app/uploads
      - ../../outputs:/app/outputs
      - ../../logs:/app/logs
    # Убираем зависимости - каждый сервис должен работать независимо
    # depends_on:
    #   video-converter:
    #     condition: service_healthy
    #   transcription-service:
    #     condition: service_healthy
    networks:
      - media-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Контейнер для конвертации видео в аудио (используем существующий)
  video-converter:
    build:
      context: ../..
      dockerfile: app/features/video_to_audio/docker/Dockerfile
    image: media-processor-converter:latest
    container_name: media-processor-converter
    ports:
      - "8002:8002"
    environment:
      - LOG_LEVEL=INFO
      - DOCKER_ENV=true
      - PORT=8002
    volumes:
      - ../../app:/app/app
      - ../../uploads:/app/uploads
      - ../../outputs:/app/outputs
      - ../../logs:/app/logs
    networks:
      - media-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Контейнер для транскрипции с GPU поддержкой
  transcription-service:
    build:
      context: ../..
      dockerfile: app/features/transcription/docker/Dockerfile
    image: media-processor-transcription:latest
    container_name: media-processor-transcription
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
      - DOCKER_ENV=true
      - WHISPER_MODEL=base
      - PORT=8001
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ../../app:/app/app
      - ../../uploads:/app/uploads
      - ../../outputs:/app/outputs
      - ../../logs:/app/logs
      - whisper-models:/root/.cache/whisper
    networks:
      - media-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Ollama сервис для LLM обработки
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - media-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Ollama Processing микросервис
  ollama-processing:
    build:
      context: ../..
      dockerfile: app/features/ollama_processing/docker/Dockerfile
    image: ollama-processing:latest
    container_name: ollama-processing
    ports:
      - "8004:8004"
    environment:
      - LOG_LEVEL=INFO
      - DOCKER_ENV=true
      - PORT=8004
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_HOST=ollama:11434
    volumes:
      - ../../app:/app/app
      - ../../uploads:/app/uploads
      - ../../outputs:/app/outputs
      - ../../logs:/app/logs
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Контейнер для LLM обработки с GPU поддержкой (старый)
  llm-processing:
    build:
      context: ../..
      dockerfile: app/features/llm_processing/docker/Dockerfile
    image: pres-prog-llm:latest
    container_name: pres-prog-llm
    ports:
      - "8003:8003"
    environment:
      - LOG_LEVEL=INFO
      - DOCKER_ENV=true
      - PORT=8003
      - CUDA_VISIBLE_DEVICES=0
      - LLAMA_CUBLAS=1
    volumes:
      - ../../app:/app/app
      - ../../uploads:/app/uploads
      - ../../outputs:/app/outputs
      - ../../logs:/app/logs
      - ../../models:/models
    networks:
      - media-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

networks:
  media-network:
    driver: bridge

volumes:
  whisper-models:
    driver: local
  ollama-models:
    driver: local
