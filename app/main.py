"""
–û—Å–Ω–æ–≤–Ω–æ–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
"""

import os
import logging
import tempfile
import json
import re
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

import uvicorn
import httpx
from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks, Form
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import aiofiles

from app.core.config import settings
from app.core.logger import setup_logger, get_recent_logs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

def sanitize_filename(filename: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = re.sub(r'[^\w\-_\.]', '_', filename)
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    sanitized = re.sub(r'_+', '_', sanitized)
    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    sanitized = sanitized.strip('_')
    return sanitized

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.APP_NAME,
    description="–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
    version=settings.APP_VERSION
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
settings.create_directories()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ HTTP-–∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
MICROSERVICES_CONFIG = {
    "transcription_service": {
        "url": "http://media-processor-transcription:8001",
        "health_endpoint": "/health"
    },
    "video_converter": {
        "url": "http://media-processor-converter:8002", 
        "health_endpoint": "/health"
    }
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
task_statuses: Dict[str, Dict[str, Any]] = {}


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
        await check_microservices_health()
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        raise


async def check_microservices_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        for service_name, config in MICROSERVICES_CONFIG.items():
            try:
                health_url = f"{config['url']}{config['health_endpoint']}"
                response = await client.get(health_url)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ {service_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è {service_name} –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                # –û–Ω–∏ –º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ


async def call_transcription_service(file_path: Path, task_id: str, model_size: str = "base") -> Dict[str, Any]:
    """–í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    
    transcription_url = f"{MICROSERVICES_CONFIG['transcription_service']['url']}/transcribe"
    
    try:
        async with httpx.AsyncClient(timeout=300.0) as client:  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            with open(file_path, 'rb') as f:
                files = {'file': (file_path.name, f, 'application/octet-stream')}
                data = {'task_id': task_id, 'model_size': model_size}
                
                response = await client.post(transcription_url, files=files, data=data)
                
                if response.status_code == 200:
                    return response.json()
                else:
                    raise HTTPException(
                        status_code=response.status_code,
                        detail=f"–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}"
                    )
                    
    except httpx.TimeoutException:
        raise HTTPException(status_code=408, detail="–¢–∞–π–º–∞—É—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}")


async def get_transcription_status(task_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
    
    status_url = f"{MICROSERVICES_CONFIG['transcription_service']['url']}/status/{task_id}"
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(status_url)
            
            if response.status_code == 200:
                return response.json()
            else:
                raise HTTPException(
                    status_code=response.status_code,
                    detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.text}"
                )
                
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


async def call_video_converter_service(file_path: Path, task_id: str) -> Dict[str, Any]:
    """–í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ"""
    
    converter_url = f"{MICROSERVICES_CONFIG['video_converter']['url']}/convert"
    
    try:
        async with httpx.AsyncClient(timeout=300.0) as client:  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            with open(file_path, 'rb') as f:
                files = {'file': (file_path.name, f, 'application/octet-stream')}
                data = {'task_id': task_id}
                
                response = await client.post(converter_url, files=files, data=data)
                
                if response.status_code == 200:
                    return response.json()
                else:
                    raise HTTPException(
                        status_code=response.status_code,
                        detail=f"–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {response.text}"
                    )
                    
    except httpx.TimeoutException:
        raise HTTPException(status_code=408, detail="–¢–∞–π–º–∞—É—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")


@app.get("/models")
async def get_available_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        models_url = f"{MICROSERVICES_CONFIG['transcription_service']['url']}/models"
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(models_url)
            if response.status_code == 200:
                return response.json()
            else:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {str(e)}")

@app.get("/", response_class=HTMLResponse)
async def get_main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏—á"""
    
    # –ß–∏—Ç–∞–µ–º HTML —à–∞–±–ª–æ–Ω
    template_path = Path(__file__).parent / "web" / "templates" / "index.html"
    
    try:
        async with aiofiles.open(template_path, 'r', encoding='utf-8') as f:
            html_content = await f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
        html_content = html_content.replace("{{ app_name }}", settings.APP_NAME)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return HTMLResponse(content="<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h1>")


@app.post("/process")
async def process_file(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    feature: str = Form(...),
    model_size: str = Form("base")
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏—á–∏
    
    Args:
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
        feature: –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–∏—á–∞ ('video-to-audio' –∏–ª–∏ 'transcription')
        
    Returns:
        JSON —Å task_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    
    logger.info(f"üì§ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file.filename} (—Ñ–∏—á–∞: {feature})")
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    original_filename = file.filename
    safe_filename = sanitize_filename(file.filename)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    file_extension = Path(original_filename).suffix.lower()
    if file_extension not in settings.ALL_SUPPORTED_FORMATS:
        logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(settings.ALL_SUPPORTED_FORMATS)}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏—á–∏
    if feature not in ['video-to-audio', 'transcription']:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏—á–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏—á–∏: 'video-to-audio', 'transcription'"
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
    task_id = f"task_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{safe_filename}"
    logger.info(f"üÜî –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID: {task_id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º
        file_path = settings.UPLOAD_DIR / safe_filename
        
        async with aiofiles.open(file_path, 'wb') as f:
            content = await file.read()
            await f.write(content)
        
        logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if feature == 'transcription':
            background_tasks.add_task(
                process_transcription_task,
                task_id,
                file_path,
                file_extension,
                model_size
            )
        elif feature == 'video-to-audio':
            background_tasks.add_task(
                process_video_to_audio_task,
                task_id,
                file_path,
                file_extension
            )
        
        return JSONResponse({
            "task_id": task_id,
            "message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "filename": original_filename,
            "safe_filename": safe_filename,
            "feature": feature
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


async def process_transcription_task(task_id: str, file_path: Path, file_extension: str, model_size: str = "base"):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    task_statuses[task_id] = {
        "status": "processing",
        "progress": 0,
        "message": "–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...",
        "logs": [],
        "error": None,
        "result_file": None
    }
    
    def add_log(level: str, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        log_entry = {
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "level": level,
            "message": message
        }
        task_statuses[task_id]["logs"].append(log_entry)
        logger.info(f"[{task_id}] {level}: {message}")
    
    try:
        add_log("INFO", f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {file_path.name}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        task_statuses[task_id].update({
            "progress": 10,
            "message": "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏..."
        })
        
                # –í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        results = await call_transcription_service(file_path, task_id, model_size)
        
        add_log("INFO", "‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –¥–≤–∞ —Ñ–∞–π–ª–∞
        simple_output_file = settings.OUTPUT_DIR / f"{task_id}_simple.txt"
        detailed_output_file = settings.OUTPUT_DIR / f"{task_id}_detailed.txt"
        
        async with aiofiles.open(simple_output_file, 'w', encoding='utf-8') as f:
            await f.write(results['simple_text'])
        
        async with aiofiles.open(detailed_output_file, 'w', encoding='utf-8') as f:
            await f.write(results['detailed_text'])
        
        add_log("SUCCESS", f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "message": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            "simple_file": str(simple_output_file),
            "detailed_file": str(detailed_output_file)
        })
        
    except Exception as e:
        add_log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}")
        
        task_statuses[task_id].update({
            "status": "failed",
            "progress": 0,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "error": str(e)
        })
        
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            if file_path.exists():
                file_path.unlink()
                add_log("INFO", "üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            add_log("WARNING", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")


async def process_video_to_audio_task(task_id: str, file_path: Path, file_extension: str):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    task_statuses[task_id] = {
        "status": "processing",
        "progress": 0,
        "message": "–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...",
        "logs": [],
        "error": None,
        "result_file": None
    }
    
    def add_log(level: str, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        log_entry = {
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "level": level,
            "message": message
        }
        task_statuses[task_id]["logs"].append(log_entry)
        logger.info(f"[{task_id}] {level}: {message}")
    
    try:
        add_log("INFO", f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {file_path.name}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        task_statuses[task_id].update({
            "progress": 10,
            "message": "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏..."
        })
        
        # –í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        results = await call_video_converter_service(file_path, task_id)
        
        add_log("INFO", "‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        
        add_log("SUCCESS", f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "message": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            "audio_file": results.get("audio_file")
        })
        
    except Exception as e:
        add_log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        
        task_statuses[task_id].update({
            "status": "failed",
            "progress": 0,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "error": str(e)
        })
        
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            if file_path.exists():
                file_path.unlink()
                add_log("INFO", "üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            add_log("WARNING", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")


@app.get("/status/{task_id}")
async def get_task_status(task_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        
    Returns:
        JSON —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞—á–∏
    """
    
    if task_id not in task_statuses:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return JSONResponse(task_statuses[task_id])


@app.get("/download/{task_id}/{file_type}")
async def download_result(task_id: str, file_type: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ ('simple', 'detailed', –∏–ª–∏ 'audio')
        
    Returns:
        –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    if task_id not in task_statuses:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    task_status = task_statuses[task_id]
    
    if task_status["status"] != "completed":
        raise HTTPException(status_code=400, detail="–ó–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    if file_type == "simple":
        result_file = task_status.get("simple_file")
        filename = f"{task_id}_simple.txt"
    elif file_type == "detailed":
        result_file = task_status.get("detailed_file")
        filename = f"{task_id}_detailed.txt"
    elif file_type == "audio":
        result_file = task_status.get("audio_file")
        filename = f"{task_id}_audio.wav"
    else:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'simple', 'detailed' –∏–ª–∏ 'audio'")
    
    if not result_file or not Path(result_file).exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return FileResponse(
        path=result_file,
        filename=filename,
        media_type="text/plain" if file_type in ["simple", "detailed"] else "audio/wav"
    )


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
    microservices_status = {}
    
    for service_name, config in MICROSERVICES_CONFIG.items():
        try:
            health_url = f"{config['url']}{config['health_endpoint']}"
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(health_url)
                if response.status_code == 200:
                    logger.info(f"‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å {service_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                    microservices_status[service_name] = "healthy"
                else:
                    logger.warning(f"‚ö†Ô∏è –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å {service_name} –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                    microservices_status[service_name] = "unhealthy"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            microservices_status[service_name] = "unavailable"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_healthy = all(status == "healthy" for status in microservices_status.values())
    overall_status = "healthy" if all_healthy else "degraded"

    return JSONResponse({
        "status": overall_status,
        "app_name": settings.APP_NAME,
        "app_version": settings.APP_VERSION,
        "supported_formats": list(settings.ALL_SUPPORTED_FORMATS),
        "features": ["video-to-audio", "transcription"],
        "architecture": "microservices",
        "microservices": microservices_status
    })


@app.get("/logs")
async def get_logs(limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
    
    logs = get_recent_logs(limit)
    return JSONResponse({"logs": logs})


if __name__ == "__main__":
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    host = settings.HOST
    port = settings.PORT
    log_level = settings.LOG_LEVEL.lower()  # uvicorn —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
    
    # –í Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.0.0.0 –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
    if settings.DOCKER_ENV:
        host = "0.0.0.0"
    
    uvicorn.run(
        "app.main:app",
        host=host,
        port=port,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ Docker
        log_level=log_level
    )
