"""
–°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WhisperX
"""

import os
import torch
import whisperx
import librosa
import numpy as np
from pathlib import Path
from typing import Optional, Callable, Dict, List, Any
from datetime import datetime
import tempfile
import gc
import subprocess

from app.core.logger import setup_logger
from app.core.config import settings

logger = setup_logger(__name__)


class TranscriptionService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.model = None
        self.align_model = None
        self.diarize_model = None
        self.device = None
        self.compute_type = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        self.model_size = "base"  # tiny, base, small, medium, large-v2, large-v3
        self.language = "ru"      # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—É–∑
        self.pause_settings = {
            'min_pause_duration': 0.2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã (—Å–µ–∫)
            'energy_threshold': 0.005,  # –ü–æ—Ä–æ–≥ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
            'frame_length': 1024,       # –î–ª–∏–Ω–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            'hop_length': 256          # –®–∞–≥ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        }
    
    def convert_video_to_audio(self, video_path: Path, output_path: Path) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
        try:
            logger.info(f"üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ: {video_path}")
            
            # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            cmd = [
                'ffmpeg',
                '-i', str(video_path),
                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                '-acodec', 'pcm_s16le',  # –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ
                '-ar', '16000',  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                '-ac', '1',  # –ú–æ–Ω–æ
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                str(output_path)
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –∞—É–¥–∏–æ: {output_path}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
            return False

    def is_video_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ"""
        return file_path.suffix.lower() in settings.VIDEO_FORMATS
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Ç–∏–ø –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self._setup_device()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper
        await self._load_whisper_model()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        await self._load_alignment_model()
        
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_device(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è WhisperX
        self.device = "cpu"
        self.compute_type = "int8"
        
        # –û—Ç–∫–ª—é—á–∞–µ–º CUDA –¥–ª—è PyTorch
        os.environ["CUDA_VISIBLE_DEVICES"] = ""
        
        if torch.cuda.is_available():
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            
            logger.info(f"‚ÑπÔ∏è GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {gpu_name} ({gpu_memory:.1f} –ì–ë), –Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à GPU
            torch.cuda.empty_cache()
            
        else:
            logger.info("‚ÑπÔ∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
        
        logger.info(f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {self.device.upper()}")
        logger.info(f"‚öôÔ∏è –¢–∏–ø –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {self.compute_type}")
    
    async def _load_whisper_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ WhisperX –Ω–∞ CPU"""
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –Ω–∞ CPU: {self.model_size}")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ CPU
            self.model = whisperx.load_model(
                self.model_size,
                device="cpu",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
                compute_type="int8",  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è CPU
                language=self.language
            )
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å Whisper {self.model_size} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Whisper: {e}")
    
    async def _load_alignment_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤ –Ω–∞ CPU"""
        logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤ –Ω–∞ CPU...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ CPU
            self.align_model, metadata = whisperx.load_align_model(
                language_code=self.language,
                device="cpu"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
            )
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: {e}")
            
            try:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ CPU
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –Ω–∞ CPU...")
                self.align_model, metadata = whisperx.load_align_model(
                    language_code="en",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ fallback
                    device="cpu"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
                )
                logger.info("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")
                
            except Exception as e2:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è: {e2}")
                self.align_model = None
    
    def is_cuda_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA"""
        return torch.cuda.is_available()
    
    def get_device_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        info = {
            "device": self.device,
            "compute_type": self.compute_type,
            "cuda_available": torch.cuda.is_available()
        }
        
        if torch.cuda.is_available():
            info.update({
                "gpu_name": torch.cuda.get_device_name(0),
                "gpu_memory_total": torch.cuda.get_device_properties(0).total_memory,
                "gpu_memory_allocated": torch.cuda.memory_allocated(0),
                "gpu_memory_cached": torch.cuda.memory_reserved(0)
            })
        
        return info
    
    def _detect_pauses(
        self,
        audio_path: Path,
        log_callback: Optional[Callable[[str, str], None]] = None
    ) -> List[Dict]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—É–∑ –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            log_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—É–∑–∞—Ö
        """
        
        def log(level: str, message: str):
            if log_callback:
                log_callback(level, message)
            logger.debug(message)
        
        log("INFO", "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—É–∑—ã –≤ –∞—É–¥–∏–æ...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            y, sr = librosa.load(str(audio_path), sr=None)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é —Å–∏–≥–Ω–∞–ª–∞
            frame_length = self.pause_settings['frame_length']
            hop_length = self.pause_settings['hop_length']
            
            # RMS —ç–Ω–µ—Ä–≥–∏—è
            rms = librosa.feature.rms(
                y=y,
                frame_length=frame_length,
                hop_length=hop_length
            )[0]
            
            # –í—Ä–µ–º–µ–Ω–∞ –∫–∞–¥—Ä–æ–≤
            times = librosa.frames_to_time(
                range(len(rms)),
                sr=sr,
                hop_length=hop_length
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            threshold = self.pause_settings['energy_threshold']
            
            # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–∫–∏ —Å –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π (–ø–∞—É–∑—ã)
            is_pause = rms < threshold
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∞—É–∑—ã
            pauses = []
            pause_start = None
            
            for i, (time, pause) in enumerate(zip(times, is_pause)):
                if pause and pause_start is None:
                    # –ù–∞—á–∞–ª–æ –ø–∞—É–∑—ã
                    pause_start = time
                elif not pause and pause_start is not None:
                    # –ö–æ–Ω–µ—Ü –ø–∞—É–∑—ã
                    pause_duration = time - pause_start
                    
                    if pause_duration >= self.pause_settings['min_pause_duration']:
                        pauses.append({
                            'start': pause_start,
                            'end': time,
                            'duration': pause_duration
                        })
                    
                    pause_start = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—É–∑—É
            if pause_start is not None:
                pause_duration = times[-1] - pause_start
                if pause_duration >= self.pause_settings['min_pause_duration']:
                    pauses.append({
                        'start': pause_start,
                        'end': times[-1],
                        'duration': pause_duration
                    })
            
            log("INFO", f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—É–∑: {len(pauses)}")
            
            return pauses
            
        except Exception as e:
            log("WARNING", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—É–∑: {e}")
            return []
    
    async def transcribe_file(
        self,
        file_path: Path,
        file_extension: str,
        task_id: str,
        progress_callback: Optional[Callable[[int, str], None]] = None,
        log_callback: Optional[Callable[[str, str], None]] = None
    ) -> Dict[str, str]:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—Ü–∏—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            task_id: ID –∑–∞–¥–∞—á–∏
            progress_callback: –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            log_callback: –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        
        def log(level: str, message: str):
            if log_callback:
                log_callback(level, message)
            logger.info(message)
        
        def update_progress(percent: int, message: str):
            if progress_callback:
                progress_callback(percent, message)
        
        log("INFO", f"üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: {file_path.name}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        audio_file_path = None
        temp_audio_path = None
        
        try:
            update_progress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞—É–¥–∏–æ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if file_extension.lower() in ['.mp4', '.avi', '.mov', '.mkv']:
                log("INFO", "üìπ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ...")
                
                temp_audio_path = Path(tempfile.mkstemp(suffix=".wav")[1])
                if not self.convert_video_to_audio(file_path, temp_audio_path):
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ.")
                audio_file_path = temp_audio_path
                
            else:
                log("INFO", "üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª")
                audio_file_path = file_path
            
            update_progress(35, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—É–∑...")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–∞—É–∑
            pauses = self._detect_pauses(audio_file_path, log_callback)
            
            update_progress(40, "–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ Whisper...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è Whisper
            audio = whisperx.load_audio(str(audio_file_path))
            
            update_progress(50, "–í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            log("INFO", f"üéØ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (–º–æ–¥–µ–ª—å: {self.model_size}, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device})")
            
            result = self.model.transcribe(
                audio,
                batch_size=16 if self.device == "cuda" else 4
            )
            
            update_progress(75, "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–∞...")
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞)
            if self.align_model is not None:
                try:
                    log("INFO", "üéØ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º...")
                    
                    result = whisperx.align(
                        result["segments"],
                        self.align_model,
                        whisperx.utils.get_writer_output_format("json"),
                        audio,
                        "cpu",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
                        return_char_alignments=False
                    )
                    
                    log("INFO", "‚úÖ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    log("WARNING", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è: {e}")
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Å–ª–æ–≤–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                    log("INFO", "üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Å–ª–æ–≤–∞–º...")
                    result = self._create_simple_word_alignment(result)
            else:
                log("INFO", "üîÑ –ú–æ–¥–µ–ª—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Å–ª–æ–≤–∞–º...")
                result = self._create_simple_word_alignment(result)
            
            update_progress(90, "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_results = self._format_transcription_result(
                result,
                pauses,
                file_path.name,
                task_id
            )
            
            update_progress(100, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            log("INFO", "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return formatted_results
            
        except Exception as e:
            log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if temp_audio_path and temp_audio_path.exists():
                try:
                    temp_audio_path.unlink()
                    log("INFO", "üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    log("WARNING", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏
            if self.device == "cuda":
                torch.cuda.empty_cache()
                gc.collect()
    
    def _create_simple_word_alignment(self, result: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç Whisper
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Å–ª–æ–≤–∞–º
        """
        
        segments = result.get("segments", [])
        
        for segment in segments:
            text = segment.get('text', '').strip()
            start_time = segment.get('start', 0)
            end_time = segment.get('end', 0)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            import re
            words = re.findall(r'\b\w+\b|[^\w\s]', text)
            if not words:
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
            total_duration = end_time - start_time
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–æ—Å—è—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ
            word_durations = []
            for word in words:
                if re.match(r'[^\w\s]', word):  # –ó–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                    word_durations.append(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                else:
                    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ (0.3-0.8 —Å–µ–∫—É–Ω–¥—ã)
                    word_durations.append(0.5)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
            total_word_duration = sum(word_durations)
            if total_word_duration > 0:
                scale_factor = total_duration / total_word_duration
                word_durations = [d * scale_factor for d in word_durations]
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            word_list = []
            current_time = start_time
            
            for i, word in enumerate(words):
                word_end_time = current_time + word_durations[i]
                
                word_list.append({
                    'word': word,
                    'start': current_time,
                    'end': word_end_time
                })
                
                current_time = word_end_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Å–ª–æ–≤–∞–º –≤ —Å–µ–≥–º–µ–Ω—Ç
            segment['words'] = word_list
        
        return result
    
    def _format_transcription_result(
        self,
        whisper_result: Dict,
        pauses: List[Dict],
        filename: str,
        task_id: str
    ) -> Dict[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞
        
        Args:
            whisper_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç WhisperX
            pauses: –°–ø–∏—Å–æ–∫ –ø–∞—É–∑
            filename: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            task_id: ID –∑–∞–¥–∞—á–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏: 'simple_text' –∏ 'detailed_text'
        """
        
        segments = whisper_result.get("segments", [])
        
        # 1. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
        simple_lines = []
        simple_lines.append("–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –í–ò–î–ï–û")
        simple_lines.append("=" * 50)
        simple_lines.append("")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        simple_lines.append(f"–§–∞–π–ª: {filename}")
        simple_lines.append(f"–ú–æ–¥–µ–ª—å: {self.model_size}")
        simple_lines.append(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        simple_lines.append(f"–Ø–∑—ã–∫: {self.language}")
        simple_lines.append(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        simple_lines.append("")
        
        # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        simple_lines.append("–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢:")
        simple_lines.append("-" * 20)
        
        full_text = " ".join(
            segment.get('text', '').strip()
            for segment in segments
        ).strip()
        
        simple_lines.append(full_text)
        
        # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –ø–∞—É–∑–∞–º–∏)
        detailed_lines = []
        detailed_lines.append("–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –í–ò–î–ï–û (–î–ï–¢–ê–õ–¨–ù–ê–Ø)")
        detailed_lines.append("=" * 50)
        detailed_lines.append("")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        detailed_lines.append(f"–§–∞–π–ª: {filename}")
        detailed_lines.append(f"–ú–æ–¥–µ–ª—å: {self.model_size}")
        detailed_lines.append(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        detailed_lines.append(f"–Ø–∑—ã–∫: {self.language}")
        detailed_lines.append(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        detailed_lines.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—É–∑: {len(pauses)}")
        detailed_lines.append("")
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—É–∑
        if pauses:
            detailed_lines.append("–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–ê–£–ó–´:")
            detailed_lines.append("-" * 30)
            
            for i, pause in enumerate(pauses, 1):
                start_time = self._format_time(pause['start'])
                end_time = self._format_time(pause['end'])
                duration = pause['duration']
                
                detailed_lines.append(f"–ü–∞—É–∑–∞ {i}: [{start_time} - {end_time}] (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f}—Å)")
            
            detailed_lines.append("")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        has_word_timestamps = any(
            'words' in segment and segment['words']
            for segment in segments
        )
        
        if has_word_timestamps:
            detailed_lines.append("–î–ï–¢–ê–õ–¨–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ü–û –°–õ–û–í–ê–ú:")
            detailed_lines.append("-" * 40)
            
            for segment in segments:
                words = segment.get('words', [])
                
                for word_info in words:
                    start_time = self._format_time(word_info.get('start', 0))
                    end_time = self._format_time(word_info.get('end', 0))
                    word = word_info.get('word', '').strip()
                    
                    detailed_lines.append(f"  [{start_time} - {end_time}] {word}")
            
            detailed_lines.append("")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —Å–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            if segments:
                detailed_lines.append("–°–ï–ì–ú–ï–ù–¢–´:")
                detailed_lines.append("-" * 20)
                
                for segment in segments:
                    start_time = self._format_time(segment.get('start', 0))
                    end_time = self._format_time(segment.get('end', 0))
                    text = segment.get('text', '').strip()
                    
                    detailed_lines.append(f"[{start_time} - {end_time}] {text}")
                
                detailed_lines.append("")
        
        # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ —Ç–æ–∂–µ
        detailed_lines.append("–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢:")
        detailed_lines.append("-" * 20)
        detailed_lines.append(full_text)
        
        return {
            'simple_text': "\n".join(simple_lines),
            'detailed_text': "\n".join(detailed_lines)
        }
    
    def _format_time(self, seconds: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ MM:SS.ss —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            seconds: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        """
        
        minutes = int(seconds // 60)
        secs = seconds % 60
        
        return f"{minutes:02d}:{secs:05.2f}"
