"""
–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""

import os
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

import uvicorn
from fastapi import FastAPI, File, UploadFile, HTTPException, Form
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import aiofiles

from app.core.config import settings
from app.core.logger import setup_logger
from app.features.transcription.service import TranscriptionService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
transcription_service = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global transcription_service
    
    # Startup
    logger.info("üöÄ Starting transcription microservice...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcription_service = TranscriptionService()
        await transcription_service.initialize()
        
        logger.info("‚úÖ Transcription microservice successfully initialized")
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing transcription service: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down transcription microservice...")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å lifespan
app = FastAPI(
    title="Transcription Microservice",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU",
    version="1.0.0",
    lifespan=lifespan
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
settings.create_directories()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
web_dir = Path(__file__).parent / "web"
if web_dir.exists():
    app.mount("/web", StaticFiles(directory=str(web_dir)), name="web")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Transcription Service</title>
        <meta http-equiv="refresh" content="0; url=/web/index.html">
    </head>
    <body>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å... <a href="/web/index.html">–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a></p>
    </body>
    </html>
    """)


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if transcription_service is None:
            return JSONResponse(
                status_code=503,
                content={"status": "error", "message": "Service not initialized"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        gpu_status = "available" if transcription_service.device == "cuda" else "cpu_only"
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "healthy",
                "service": "transcription",
                "device": transcription_service.device,
                "gpu_status": gpu_status,
                "model_size": transcription_service.model_size,
                "language": transcription_service.language
            }
        )
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={"status": "error", "message": str(e)}
        )


@app.post("/transcribe")
async def transcribe_file(
    file: UploadFile = File(...),
    task_id: str = Form(...),
    model_size: str = Form("base")
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    
    Args:
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        task_id: ID –∑–∞–¥–∞—á–∏
        model_size: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper (tiny, base, small, medium, large-v2, large-v3)
        
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    """
    
    logger.info(f"üì§ Received audio file for transcription: {file.filename} (task_id: {task_id})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ - —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    file_extension = Path(file.filename).suffix.lower()
    if file_extension not in settings.SUPPORTED_AUDIO_FORMATS:
        logger.error(f"‚ùå Unsupported audio format: {file_extension}")
        raise HTTPException(
            status_code=400,
            detail=f"Unsupported audio format. Supported formats: {', '.join(settings.SUPPORTED_AUDIO_FORMATS)}"
        )
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = settings.UPLOAD_DIR / file.filename
        
        async with aiofiles.open(file_path, 'wb') as f:
            content = await file.read()
            await f.write(content)
        
        logger.info(f"üíæ Audio file saved: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª
        if not transcription_service.is_audio_file(file_path):
            raise HTTPException(
                status_code=400,
                detail="File is not a supported audio file"
            )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if model_size != transcription_service.model_size:
            logger.info(f"üîÑ Switching model from {transcription_service.model_size} to {model_size}")
            transcription_service.model_size = model_size
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
            await transcription_service.initialize()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        logger.info(f"üéØ Starting transcription with model: {model_size}")
        
        result = await transcription_service.transcribe_audio_file(
            audio_path=file_path,
            task_id=task_id
        )
        
        logger.info(f"‚úÖ Transcription completed for task: {task_id}")
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "task_id": task_id,
                "filename": file.filename,
                "model_used": model_size,
                "device_used": transcription_service.device,
                "result": result
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Transcription error for task {task_id}: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if file_path.exists():
                file_path.unlink()
        except:
            pass
        
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "task_id": task_id,
                "message": f"Transcription failed: {str(e)}"
            }
        )


@app.post("/transcribe/batch")
async def transcribe_batch(
    files: list[UploadFile] = File(...),
    task_id: str = Form(...),
    model_size: str = Form("base")
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    
    Args:
        files: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        task_id: ID –∑–∞–¥–∞—á–∏
        model_size: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper
        
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    """
    
    logger.info(f"üì§ Received batch transcription request: {len(files)} files (task_id: {task_id})")
    
    results = []
    errors = []
    
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if model_size != transcription_service.model_size:
            logger.info(f"üîÑ Switching model from {transcription_service.model_size} to {model_size}")
            transcription_service.model_size = model_size
            await transcription_service.initialize()
        
        for i, file in enumerate(files):
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
                file_extension = Path(file.filename).suffix.lower()
                if file_extension not in settings.SUPPORTED_AUDIO_FORMATS:
                    errors.append({
                        "filename": file.filename,
                        "error": f"Unsupported audio format: {file_extension}"
                    })
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_path = settings.UPLOAD_DIR / f"{task_id}_{i}_{file.filename}"
                
                async with aiofiles.open(file_path, 'wb') as f:
                    content = await file.read()
                    await f.write(content)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
                if not transcription_service.is_audio_file(file_path):
                    errors.append({
                        "filename": file.filename,
                        "error": "File is not a supported audio file"
                    })
                    continue
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                logger.info(f"üéØ Transcribing file {i+1}/{len(files)}: {file.filename}")
                
                result = await transcription_service.transcribe_audio_file(
                    audio_path=file_path,
                    task_id=f"{task_id}_{i}"
                )
                
                results.append({
                    "filename": file.filename,
                    "task_id": f"{task_id}_{i}",
                    "result": result
                })
                
                logger.info(f"‚úÖ File {i+1}/{len(files)} transcribed successfully")
                
            except Exception as e:
                logger.error(f"‚ùå Error transcribing file {file.filename}: {e}")
                errors.append({
                    "filename": file.filename,
                    "error": str(e)
                })
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "completed",
                "task_id": task_id,
                "total_files": len(files),
                "successful": len(results),
                "failed": len(errors),
                "model_used": model_size,
                "device_used": transcription_service.device,
                "results": results,
                "errors": errors
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Batch transcription error for task {task_id}: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "task_id": task_id,
                "message": f"Batch transcription failed: {str(e)}"
            }
        )


@app.get("/models")
async def get_available_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö"""
    try:
        return JSONResponse(
            status_code=200,
            content={
                "current_model": transcription_service.model_size,
                "current_language": transcription_service.language,
                "available_models": ["tiny", "base", "small", "medium", "large-v2", "large-v3"],
                "device": transcription_service.device,
                "gpu_available": transcription_service.device == "cuda"
            }
        )
    except Exception as e:
        logger.error(f"‚ùå Error getting models info: {e}")
        return JSONResponse(
            status_code=500,
            content={"status": "error", "message": str(e)}
        )


@app.get("/download/{filename}")
async def download_transcription(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        file_path = settings.OUTPUT_DIR / filename
        
        if not file_path.exists():
            raise HTTPException(
                status_code=404,
                detail=f"File {filename} not found"
            )
        
        logger.info(f"üì• Downloading transcription file: {filename}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if filename.endswith('.txt'):
            media_type = "text/plain"
        elif filename.endswith('.json'):
            media_type = "application/json"
        elif filename.endswith('.srt'):
            media_type = "text/plain"
        else:
            media_type = "text/plain"
        
        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type=media_type
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error downloading transcription file {filename}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error downloading file: {str(e)}"
        )


if __name__ == "__main__":
    uvicorn.run(
        "app.features.transcription.microservice:app",
        host="0.0.0.0",
        port=8002,
        reload=False,
        log_level="info"
    )
