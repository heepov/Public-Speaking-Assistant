"""
–°–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
"""

import subprocess
import tempfile
from pathlib import Path
from typing import Optional, Callable, Dict, Any
import ffmpeg

from app.core.logger import setup_logger
from app.core.config import settings

logger = setup_logger(__name__)


class VideoToAudioService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    VIDEO_FORMATS = settings.VIDEO_FORMATS
    AUDIO_FORMATS = settings.SUPPORTED_AUDIO_FORMATS
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    OPTIMAL_AUDIO_SETTINGS = {
        'sample_rate': 16000,    # WhisperX —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å 16kHz
        'channels': 1,           # –ú–æ–Ω–æ –∫–∞–Ω–∞–ª
        'format': 'wav',         # WAV –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        'codec': 'pcm_s16le'     # 16-bit PCM
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.ffmpeg_path = None
        self.is_initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info("üöÄ Initializing video to audio service...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FFmpeg
            self.ffmpeg_path = self._check_ffmpeg_installation()
            
            self.is_initialized = True
            logger.info("‚úÖ Video to audio service initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing video to audio service: {e}")
            raise
    
    def _check_ffmpeg_installation(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FFmpeg"""
        import os
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ FFmpeg (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π)
        ffmpeg_paths = [
            'ffmpeg',  # –í PATH (–æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Docker/Linux)
            '/usr/bin/ffmpeg',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –≤ Linux
            '/usr/local/bin/ffmpeg',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –≤ Linux
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º Windows –ø—É—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ Windows
        if os.name == 'nt':
            ffmpeg_paths.extend([
                r'C:\Users\developer\AppData\Local\Microsoft\WinGet\Packages\Gyan.FFmpeg_Microsoft.Winget.Source_8wekyb3d8bbwe\ffmpeg-7.1.1-full_build\bin\ffmpeg.exe',
                r'C:\Program Files\ffmpeg\bin\ffmpeg.exe',
                r'C:\ffmpeg\bin\ffmpeg.exe'
            ])
        
        for ffmpeg_path in ffmpeg_paths:
            try:
                result = subprocess.run(
                    [ffmpeg_path, '-version'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0:
                    version_info = result.stdout.split('\n')[0]
                    logger.info(f"‚úÖ FFmpeg found: {version_info} at {ffmpeg_path}")
                    return ffmpeg_path
                    
            except (FileNotFoundError, subprocess.TimeoutExpired):
                continue
        
        logger.error("‚ùå FFmpeg not found in system")
        raise RuntimeError(
            "FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg:\n"
            "Windows: choco install ffmpeg –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/\n"
            "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ FFmpeg –≤ PATH"
        )
    
    def is_video_file(self, file_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ
        """
        if not file_path.exists():
            return False
        
        file_extension = file_path.suffix.lower()
        return file_extension in self.VIDEO_FORMATS
    
    def get_video_info(self, video_path: Path) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
        """
        try:
            logger.info(f"üìπ Getting video info: {video_path}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffprobe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_format',
                '-show_streams',
                str(video_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                import json
                info = json.loads(result.stdout)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                video_info = {
                    'duration': float(info.get('format', {}).get('duration', 0)),
                    'size': int(info.get('format', {}).get('size', 0)),
                    'bitrate': int(info.get('format', {}).get('bit_rate', 0)),
                    'format': info.get('format', {}).get('format_name', ''),
                    'streams': len(info.get('streams', []))
                }
                
                logger.info(f"‚úÖ Video info retrieved: {video_info['duration']:.2f}s, {video_info['size']} bytes")
                return video_info
                
            else:
                logger.error(f"‚ùå Error getting video info: {result.stderr}")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå Error getting video info: {e}")
            return {}
    
    def convert_to_audio(
        self, 
        video_path: Path, 
        output_path: Path,
        audio_settings: Optional[Dict[str, Any]] = None
    ) -> Path:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            audio_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        """
        if not self.is_initialized:
            raise RuntimeError("Service not initialized. Call initialize() first.")
        
        if not self.is_video_file(video_path):
            raise ValueError(f"File is not a supported video format: {video_path}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        if audio_settings is None:
            audio_settings = self.OPTIMAL_AUDIO_SETTINGS
        
        try:
            logger.info(f"üé¨ Converting video to audio: {video_path}")
            logger.info(f"‚öôÔ∏è Audio settings: {audio_settings}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            cmd = [
                self.ffmpeg_path,
                '-i', str(video_path),
                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                '-acodec', audio_settings['codec'],
                '-ar', str(audio_settings['sample_rate']),
                '-ac', str(audio_settings['channels']),
                '-f', audio_settings['format'],
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                str(output_path)
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size / 1024  # KB
                    logger.info(f"‚úÖ Video successfully converted to audio: {output_path} ({file_size:.1f} KB)")
                    return output_path
                else:
                    raise RuntimeError("Output file is empty or not created")
            else:
                logger.error(f"‚ùå Video conversion error: {result.stderr}")
                raise RuntimeError(f"FFmpeg conversion failed: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout during video conversion")
            raise RuntimeError("Video conversion timeout")
        except Exception as e:
            logger.error(f"‚ùå Error during video conversion: {e}")
            raise
    
    def convert_to_audio_with_progress(
        self, 
        video_path: Path, 
        output_path: Path,
        progress_callback: Optional[Callable[[float], None]] = None,
        audio_settings: Optional[Dict[str, Any]] = None
    ) -> Path:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            audio_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        """
        if not self.is_initialized:
            raise RuntimeError("Service not initialized. Call initialize() first.")
        
        if not self.is_video_file(video_path):
            raise ValueError(f"File is not a supported video format: {video_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        video_info = self.get_video_info(video_path)
        total_duration = video_info.get('duration', 0)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        if audio_settings is None:
            audio_settings = self.OPTIMAL_AUDIO_SETTINGS
        
        try:
            logger.info(f"üé¨ Converting video to audio with progress: {video_path}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–º–∞–Ω–¥–∞ ffmpeg —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            cmd = [
                self.ffmpeg_path,
                '-i', str(video_path),
                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                '-acodec', audio_settings['codec'],
                '-ar', str(audio_settings['sample_rate']),
                '-ac', str(audio_settings['channels']),
                '-f', audio_settings['format'],
                '-progress', 'pipe:1',  # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                str(output_path)
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –≤—ã–≤–æ–¥–∞ ffmpeg
                    if 'out_time_ms=' in output:
                        try:
                            time_ms = int(output.split('=')[1])
                            current_time = time_ms / 1000000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                            if total_duration > 0 and progress_callback:
                                progress = min(current_time / total_duration, 1.0)
                                progress_callback(progress)
                        except (ValueError, IndexError):
                            pass
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            return_code = process.wait()
            
            if return_code == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size / 1024  # KB
                    logger.info(f"‚úÖ Video successfully converted to audio: {output_path} ({file_size:.1f} KB)")
                    return output_path
                else:
                    raise RuntimeError("Output file is empty or not created")
            else:
                stderr_output = process.stderr.read()
                logger.error(f"‚ùå Video conversion error: {stderr_output}")
                raise RuntimeError(f"FFmpeg conversion failed: {stderr_output}")
                
        except Exception as e:
            logger.error(f"‚ùå Error during video conversion: {e}")
            raise
    
    def cleanup_temp_file(self, file_path: Path):
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤)
        
        Args:
            file_path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            if file_path.exists():
                logger.info(f"Temporary file saved: {file_path.name}")
                logger.info(f"File path: {file_path}")
        except Exception as e:
            logger.warning(f"Could not get file info for {file_path}: {e}")
