"""
–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ
"""

import os
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

import uvicorn
from fastapi import FastAPI, File, UploadFile, HTTPException, Form
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import aiofiles

from app.core.config import settings
from app.core.logger import setup_logger
from app.features.video_to_audio.service import VideoToAudioService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Video Converter Microservice",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg",
    version="1.0.0"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
video_service = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global video_service
    
    # Startup
    logger.info("üöÄ Starting video conversion microservice...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        video_service = VideoToAudioService()
        await video_service.initialize()
        
        logger.info("‚úÖ Video conversion microservice initialized successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing service: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down video conversion microservice...")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å lifespan
app = FastAPI(
    title="Video Converter Microservice",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg",
    version="1.0.0",
    lifespan=lifespan
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
settings.create_directories()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
web_dir = Path(__file__).parent / "web"
if web_dir.exists():
    app.mount("/web", StaticFiles(directory=str(web_dir)), name="web")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Video to Audio Converter</title>
        <meta http-equiv="refresh" content="0; url=/web/index.html">
    </head>
    <body>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å... <a href="/web/index.html">–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a></p>
    </body>
    </html>
    """)


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if video_service is None:
            return JSONResponse(
                status_code=503,
                content={"status": "error", "message": "Service not initialized"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
        ffmpeg_status = "available" if video_service.ffmpeg_path else "not_found"
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "healthy",
                "service": "video_converter",
                "ffmpeg_status": ffmpeg_status,
                "ffmpeg_path": video_service.ffmpeg_path,
                "supported_video_formats": list(video_service.VIDEO_FORMATS),
                "optimal_audio_settings": video_service.OPTIMAL_AUDIO_SETTINGS
            }
        )
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={"status": "error", "message": str(e)}
        )


@app.post("/convert")
async def convert_video_to_audio(
    file: UploadFile = File(...),
    task_id: str = Form(...),
    audio_format: str = Form("wav"),
    sample_rate: int = Form(16000),
    channels: int = Form(1)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ
    
    Args:
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        task_id: ID –∑–∞–¥–∞—á–∏
        audio_format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ (wav, mp3, flac)
        sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        channels: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    """
    
    logger.info(f"üì§ Received video file for conversion: {file.filename} (task_id: {task_id})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    file_extension = Path(file.filename).suffix.lower()
    if file_extension not in settings.VIDEO_FORMATS:
        logger.error(f"‚ùå Unsupported video format: {file_extension}")
        raise HTTPException(
            status_code=400,
            detail=f"Unsupported video format. Supported formats: {', '.join(settings.VIDEO_FORMATS)}"
        )
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = settings.UPLOAD_DIR / file.filename
        
        async with aiofiles.open(file_path, 'wb') as f:
            content = await file.read()
            await f.write(content)
        
        logger.info(f"üíæ Video file saved: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        if not video_service.is_video_file(file_path):
            raise HTTPException(
                status_code=400,
                detail="File is not a supported video file"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = video_service.get_video_info(file_path)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        audio_settings = {
            'sample_rate': sample_rate,
            'channels': channels,
            'format': audio_format,
            'codec': 'pcm_s16le' if audio_format == 'wav' else 'mp3'
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞—É–¥–∏–æ
        output_filename = f"{task_id}_audio.{audio_format}"
        output_path = settings.OUTPUT_DIR / output_filename
        
        logger.info(f"üé¨ Starting video to audio conversion...")
        
        audio_file = video_service.convert_to_audio(
            video_path=file_path,
            output_path=output_path,
            audio_settings=audio_settings
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ
        audio_size = audio_file.stat().st_size / 1024  # KB
        
        logger.info(f"‚úÖ Video successfully converted to audio: {audio_file}")
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "task_id": task_id,
                "input_file": file.filename,
                "output_file": output_filename,
                "video_info": video_info,
                "audio_settings": audio_settings,
                "audio_file_size_kb": audio_size,
                "output_path": str(audio_file)
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Video conversion error for task {task_id}: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if file_path.exists():
                file_path.unlink()
        except:
            pass
        
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "task_id": task_id,
                "message": f"Video conversion failed: {str(e)}"
            }
        )


@app.post("/convert/batch")
async def convert_batch(
    files: list[UploadFile] = File(...),
    task_id: str = Form(...),
    audio_format: str = Form("wav"),
    sample_rate: int = Form(16000),
    channels: int = Form(1)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ
    
    Args:
        files: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
        task_id: ID –∑–∞–¥–∞—á–∏
        audio_format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ
        sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        channels: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    """
    
    logger.info(f"üì§ Received batch conversion request: {len(files)} files (task_id: {task_id})")
    
    results = []
    errors = []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
    audio_settings = {
        'sample_rate': sample_rate,
        'channels': channels,
        'format': audio_format,
        'codec': 'pcm_s16le' if audio_format == 'wav' else 'mp3'
    }
    
    try:
        for i, file in enumerate(files):
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
                file_extension = Path(file.filename).suffix.lower()
                if file_extension not in settings.VIDEO_FORMATS:
                    errors.append({
                        "filename": file.filename,
                        "error": f"Unsupported video format: {file_extension}"
                    })
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_path = settings.UPLOAD_DIR / f"{task_id}_{i}_{file.filename}"
                
                async with aiofiles.open(file_path, 'wb') as f:
                    content = await file.read()
                    await f.write(content)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
                if not video_service.is_video_file(file_path):
                    errors.append({
                        "filename": file.filename,
                        "error": "File is not a supported video file"
                    })
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                video_info = video_service.get_video_info(file_path)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                logger.info(f"üé¨ Converting file {i+1}/{len(files)}: {file.filename}")
                
                output_filename = f"{task_id}_{i}_audio.{audio_format}"
                output_path = settings.OUTPUT_DIR / output_filename
                
                audio_file = video_service.convert_to_audio(
                    video_path=file_path,
                    output_path=output_path,
                    audio_settings=audio_settings
                )
                
                audio_size = audio_file.stat().st_size / 1024  # KB
                
                results.append({
                    "filename": file.filename,
                    "task_id": f"{task_id}_{i}",
                    "output_file": output_filename,
                    "video_info": video_info,
                    "audio_file_size_kb": audio_size,
                    "output_path": str(audio_file)
                })
                
                logger.info(f"‚úÖ File {i+1}/{len(files)} converted successfully")
                
            except Exception as e:
                logger.error(f"‚ùå Error converting file {file.filename}: {e}")
                errors.append({
                    "filename": file.filename,
                    "error": str(e)
                })
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "completed",
                "task_id": task_id,
                "total_files": len(files),
                "successful": len(results),
                "failed": len(errors),
                "audio_settings": audio_settings,
                "results": results,
                "errors": errors
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Batch conversion error for task {task_id}: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "task_id": task_id,
                "message": f"Batch conversion failed: {str(e)}"
            }
        )


@app.get("/formats")
async def get_supported_formats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    try:
        return JSONResponse(
            status_code=200,
            content={
                "supported_video_formats": list(video_service.VIDEO_FORMATS),
                "supported_audio_formats": list(video_service.AUDIO_FORMATS),
                "optimal_audio_settings": video_service.OPTIMAL_AUDIO_SETTINGS
            }
        )
    except Exception as e:
        logger.error(f"‚ùå Error getting formats info: {e}")
        return JSONResponse(
            status_code=500,
            content={"status": "error", "message": str(e)}
        )


@app.get("/download/{filename}")
async def download_file(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
    try:
        file_path = settings.OUTPUT_DIR / filename
        
        if not file_path.exists():
            raise HTTPException(
                status_code=404,
                detail=f"File {filename} not found"
            )
        
        logger.info(f"üì• Downloading file: {filename}")
        
        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type="audio/wav"  # –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error downloading file {filename}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error downloading file: {str(e)}"
        )


if __name__ == "__main__":
    uvicorn.run(
        "app.features.video_to_audio.microservice:app",
        host="0.0.0.0",
        port=8003,
        reload=False,
        log_level="info"
    )
