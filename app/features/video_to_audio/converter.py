"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
"""

import subprocess
import tempfile
from pathlib import Path
from typing import Optional, Callable, Dict, Any
import ffmpeg

from app.core.logger import setup_logger
from app.core.config import settings

logger = setup_logger(__name__)


class VideoToAudioConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    VIDEO_FORMATS = settings.VIDEO_FORMATS
    AUDIO_FORMATS = settings.SUPPORTED_AUDIO_FORMATS
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    OPTIMAL_AUDIO_SETTINGS = {
        'sample_rate': 16000,    # WhisperX —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å 16kHz
        'channels': 1,           # –ú–æ–Ω–æ –∫–∞–Ω–∞–ª
        'format': 'wav',         # WAV –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        'codec': 'pcm_s16le'     # 16-bit PCM
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
        self.ffmpeg_path = self._check_ffmpeg_installation()
    
    def _check_ffmpeg_installation(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FFmpeg"""
        import os
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ FFmpeg (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π)
        ffmpeg_paths = [
            'ffmpeg',  # –í PATH (–æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Docker/Linux)
            '/usr/bin/ffmpeg',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –≤ Linux
            '/usr/local/bin/ffmpeg',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –≤ Linux
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º Windows –ø—É—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ Windows
        if os.name == 'nt':
            ffmpeg_paths.extend([
                r'C:\Users\developer\AppData\Local\Microsoft\WinGet\Packages\Gyan.FFmpeg_Microsoft.Winget.Source_8wekyb3d8bbwe\ffmpeg-7.1.1-full_build\bin\ffmpeg.exe',
                r'C:\Program Files\ffmpeg\bin\ffmpeg.exe',
                r'C:\ffmpeg\bin\ffmpeg.exe'
            ])
        
        ffmpeg_found = False
        
        for ffmpeg_path in ffmpeg_paths:
            try:
                result = subprocess.run(
                    [ffmpeg_path, '-version'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0:
                    version_info = result.stdout.split('\n')[0]
                    logger.info(f"‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω: {version_info}")
                    logger.info(f"üìç –ü—É—Ç—å: {ffmpeg_path}")
                    ffmpeg_found = True
                    break
                    
            except (FileNotFoundError, subprocess.TimeoutExpired):
                continue
        
        if not ffmpeg_found:
            logger.error("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            logger.error("üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:")
            for path in ffmpeg_paths:
                logger.error(f"   - {path}")
            raise RuntimeError(
                "FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg:\n"
                "Windows: choco install ffmpeg –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/\n"
                "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ FFmpeg –≤ PATH"
            )
        
        return ffmpeg_path
    
    def is_video_file(self, file_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ, False –µ—Å–ª–∏ –∞—É–¥–∏–æ
        """
        return file_path.suffix.lower() in self.VIDEO_FORMATS
    
    def is_audio_file(self, file_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—É–¥–∏–æ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –∞—É–¥–∏–æ
        """
        return file_path.suffix.lower() in self.AUDIO_FORMATS
    
    def get_media_info(self, file_path: Path) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–µ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        """
        logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: {file_path.name}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg.probe –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è cmd - –æ–Ω —Å–∞–º –Ω–∞–π–¥–µ—Ç ffprobe
            probe = ffmpeg.probe(str(file_path))
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            format_info = probe.get('format', {})
            duration = float(format_info.get('duration', 0))
            file_size = int(format_info.get('size', 0))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö
            streams = probe.get('streams', [])
            
            video_streams = [s for s in streams if s.get('codec_type') == 'video']
            audio_streams = [s for s in streams if s.get('codec_type') == 'audio']
            
            info = {
                'duration': duration,
                'file_size': file_size,
                'format_name': format_info.get('format_name', 'unknown'),
                'video_streams': len(video_streams),
                'audio_streams': len(audio_streams),
                'has_video': len(video_streams) > 0,
                'has_audio': len(audio_streams) > 0
            }
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–µ
            if audio_streams:
                audio_stream = audio_streams[0]
                info.update({
                    'audio_codec': audio_stream.get('codec_name', 'unknown'),
                    'audio_sample_rate': int(audio_stream.get('sample_rate', 0)),
                    'audio_channels': int(audio_stream.get('channels', 0)),
                    'audio_bit_rate': int(audio_stream.get('bit_rate', 0))
                })
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–µ
            if video_streams:
                video_stream = video_streams[0]
                info.update({
                    'video_codec': video_stream.get('codec_name', 'unknown'),
                    'video_width': int(video_stream.get('width', 0)),
                    'video_height': int(video_stream.get('height', 0)),
                    'video_fps': eval(video_stream.get('r_frame_rate', '0/1'))
                })
            
            logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {info}")
            return info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: {e}")
    
    def convert_to_audio(
        self,
        input_path: Path,
        output_path: Optional[Path] = None,
        progress_callback: Optional[Callable[[int, str], None]] = None,
        log_callback: Optional[Callable[[str, str], None]] = None
    ) -> Path:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        
        Args:
            input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None - —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π)
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            log_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        """
        
        def log(level: str, message: str):
            if log_callback:
                log_callback(level, message)
            logger.info(message)
        
        def update_progress(percent: int, message: str):
            if progress_callback:
                progress_callback(percent, message)
        
        log("INFO", f"üéµ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: {input_path.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        try:
            media_info = self.get_media_info(input_path)
        except Exception as e:
            log("ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
            raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        if not media_info['has_audio']:
            raise RuntimeError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if output_path is None:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ outputs —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            import uuid
            unique_id = str(uuid.uuid4())[:8]
            output_path = settings.OUTPUT_DIR / f"converted_audio_{unique_id}.wav"
        
        log("INFO", f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
        
        update_progress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ (ffmpeg-python —Å–∞–º –Ω–∞–π–¥–µ—Ç ffmpeg)
            input_stream = ffmpeg.input(str(input_path))
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            output_kwargs = {
                'acodec': self.OPTIMAL_AUDIO_SETTINGS['codec'],
                'ar': self.OPTIMAL_AUDIO_SETTINGS['sample_rate'],
                'ac': self.OPTIMAL_AUDIO_SETTINGS['channels'],
                'f': self.OPTIMAL_AUDIO_SETTINGS['format']
            }
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
            if media_info['has_video']:
                log("INFO", "üìπ –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
                output_stream = ffmpeg.output(
                    input_stream.audio,
                    str(output_path),
                    **output_kwargs
                )
            else:
                log("INFO", "üéµ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                output_stream = ffmpeg.output(
                    input_stream,
                    str(output_path),
                    **output_kwargs
                )
            
            update_progress(20, "–ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            process = ffmpeg.run_async(
                output_stream,
                pipe_stderr=True,
                overwrite_output=True,
                quiet=False
            )
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            duration = media_info['duration']
            last_progress = 20
            
            while True:
                output = process.stderr.readline()
                if output == b'' and process.poll() is not None:
                    break
                
                if output:
                    line = output.decode('utf-8', errors='ignore').strip()
                    
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –≤—ã–≤–æ–¥–∞ FFmpeg
                    if 'time=' in line and duration > 0:
                        try:
                            time_str = line.split('time=')[1].split()[0]
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
                            time_parts = time_str.split(':')
                            if len(time_parts) == 3:
                                current_time = (
                                    float(time_parts[0]) * 3600 +
                                    float(time_parts[1]) * 60 +
                                    float(time_parts[2])
                                )
                                
                                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–æ—Ç 20% –¥–æ 90%)
                                progress = min(90, 20 + int((current_time / duration) * 70))
                                
                                if progress > last_progress:
                                    update_progress(
                                        progress,
                                        f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {current_time:.1f}s / {duration:.1f}s"
                                    )
                                    last_progress = progress
                        except:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if any(keyword in line.lower() for keyword in ['error', 'warning']):
                        log("WARNING", f"FFmpeg: {line}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            return_code = process.wait()
            
            if return_code != 0:
                stderr_output = process.stderr.read().decode('utf-8', errors='ignore')
                log("ERROR", f"FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {return_code}): {stderr_output}")
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∫–æ–¥ {return_code})")
            
            update_progress(95, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if not output_path.exists():
                raise RuntimeError("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            
            output_size = output_path.stat().st_size
            if output_size == 0:
                raise RuntimeError("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_info = self.get_media_info(output_path)
            
            log("INFO", f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            log("INFO", f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_size / (1024*1024):.2f} –ú–ë")
            log("INFO", f"   üéµ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result_info['duration']:.2f} —Å–µ–∫")
            log("INFO", f"   üìä –ß–∞—Å—Ç–æ—Ç–∞: {result_info.get('audio_sample_rate', 'N/A')} –ì—Ü")
            log("INFO", f"   üîä –ö–∞–Ω–∞–ª—ã: {result_info.get('audio_channels', 'N/A')}")
            
            update_progress(100, "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            return output_path
            
        except Exception as e:
            log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            
            # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            if output_path and output_path.exists():
                try:
                    output_path.unlink()
                except:
                    pass
            
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    
    def cleanup_temp_file(self, file_path: Path):
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤)
        
        Args:
            file_path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            if file_path.exists():
                logger.info(f"üíæ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path.name}")
                logger.info(f"üìç –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
